package com.swm.serviceImpl;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;

import com.swm.entity.BookingDepositEntity;
import com.swm.entity.BookingEntity;
import com.swm.entity.BookingOtpEntity;
import com.swm.entity.HomestayAftercareEntity;
import com.swm.entity.HomestayEntity;
import com.swm.entity.PassengerEntity;
import com.swm.entity.UserEntity;
import com.swm.enums.BookingStatus;
import com.swm.exception.ParseDateException;
import com.swm.repository.IBookingRepository;
import com.swm.service.IBookingService;
import com.swm.service.IHomestayAftercareService;
import com.swm.service.IHomestayService;
import com.swm.service.IUserService;

import net.bytebuddy.utility.RandomString;

public class BookingService implements IBookingService {

	@Autowired
	private IBookingRepository bookingRepo;

	@Autowired
	private IHomestayAftercareService homestayAftercareService;

	@Autowired
	@Lazy
	private IUserService userServcie;

	@Autowired
	@Lazy
	private IHomestayService homestayService;
	
	private SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
	
	private Date currentDate = new Date();

	@Override
	public BookingEntity createBooking(String passengerName, String homestayName, List<String> serviceNameList,
			String checkIn, String checkOut) {
		BookingEntity bookingEntity = new BookingEntity();
		UserEntity userEntity = userServcie.findUserByUsername(passengerName);
		PassengerEntity passengerEntity = userEntity.getPassenger();
		passengerEntity.setBooking(List.of(bookingEntity));
		HomestayEntity homestayEntity = homestayService.findHomestayByName(homestayName);
		homestayEntity.setBooking(List.of(bookingEntity));
		List<HomestayAftercareEntity> homestayServicesList = serviceNameList.stream()
				.map(s -> homestayAftercareService.findHomestayServiceByName(s)).collect(Collectors.toList());
		homestayServicesList.forEach(s -> {
			s.setBookingService(List.of(bookingEntity));
		});
		BookingDepositEntity bookingDepositEntity = new BookingDepositEntity();
		bookingDepositEntity.setBookingDeposit(bookingEntity);
		BookingOtpEntity bookingOtpEntity = new BookingOtpEntity();
		String randomBookingOtp = RandomString.make(6);
		bookingOtpEntity.setCode(randomBookingOtp);
		bookingOtpEntity.setBookingContainer(bookingEntity);
		long totalPrice = this.calculateTotalPrice(homestayServicesList, homestayEntity, checkIn, checkOut);
		bookingEntity.setCreatedBy(passengerName);
		bookingEntity.setCreatedDate(currentDate);
		try {
			bookingEntity.setCheckIn(simpleDateFormat.parse(checkIn));
			bookingEntity.setCheckOut(simpleDateFormat.parse(checkOut));
		} catch (ParseException e) {
			throw new ParseDateException(e.getMessage());
		}
		bookingEntity.setTotalPrice(totalPrice);
		bookingEntity.setStatus(BookingStatus.BOOKING_PENDING.name());
		bookingEntity.setBookingHomestay(homestayEntity);
		bookingEntity.setBookingCreator(passengerEntity);
		bookingEntity.setBookingDeposit(bookingDepositEntity);
		bookingEntity.setHomestayServiceBooking(homestayServicesList);
		bookingEntity.setBookingOtp(bookingOtpEntity);
		
		return bookingEntity;
	}
	
	private Long differentInDay(String checkIn, String checkOut) {
		
		try {
			Date checkInDate = simpleDateFormat.parse(checkIn);
			Date checkOutDate = simpleDateFormat.parse(checkOut);
			long difference_in_time = checkOutDate.getTime() - checkInDate.getTime();
			long difference_in_day = (difference_in_time/ (1000 * 60 * 60 * 24)) % 365;
			return difference_in_day;
		} catch (ParseException e) {
			throw new ParseDateException(e.getMessage());
		}
	}
	
	private Long calculateTotalPrice(List<HomestayAftercareEntity> homestayServiceList, HomestayEntity homestayBooking, String checkIn, String checkOut) {
		long totalPrice = 0;
		for (int i = 0; i < homestayServiceList.size(); i++) {
			totalPrice = totalPrice + homestayServiceList.get(i).getPrice();
		}
		Long numberOfBookingDate = this.differentInDay(checkIn, checkOut);
		long totalBookingDatePrice = homestayBooking.getPrice() * numberOfBookingDate;
		totalPrice = totalPrice + totalBookingDatePrice;
		return totalPrice;
	}

}
