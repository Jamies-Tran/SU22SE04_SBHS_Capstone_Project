package com.swm.serviceImpl;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;

import com.swm.entity.BookingEntity;
import com.swm.entity.HomestayAftercareEntity;
import com.swm.entity.HomestayEntity;
import com.swm.entity.PassengerEntity;
import com.swm.entity.UserEntity;
import com.swm.exception.ParseDateException;
import com.swm.repository.IBookingRepository;
import com.swm.service.IBookingService;
import com.swm.service.IHomestayAftercareService;
import com.swm.service.IHomestayService;
import com.swm.service.IUserService;

public class BookingService implements IBookingService {

	@Autowired
	private IBookingRepository bookingRepo;

	@Autowired
	private IHomestayAftercareService homestayAftercareService;

	@Autowired
	@Lazy
	private IUserService userServcie;

	@Autowired
	@Lazy
	private IHomestayService homestayService;
	
	private SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");

	@Override
	public BookingEntity createBooking(String passengerName, String homestayName, List<String> serviceNameList,
			String checkIn, String checkOut) {
		Long totalPrice = 0L;
		BookingEntity bookingEntity = new BookingEntity();
		UserEntity userEntity = userServcie.findUserByUsername(passengerName);
		PassengerEntity passengerEntity = userEntity.getPassenger();
		passengerEntity.setBooking(List.of(bookingEntity));
		HomestayEntity homestayEntity = homestayService.findHomestayByName(homestayName);
		homestayEntity.setBooking(List.of(bookingEntity));
		List<HomestayAftercareEntity> homestayServicesList = serviceNameList.stream()
				.map(s -> homestayAftercareService.findHomestayServiceByName(s)).collect(Collectors.toList());
		homestayServicesList.forEach(s -> {
			s.setBookingService(List.of(bookingEntity));
		});
		Long numberOfBookingDate = this.differentInDay(checkIn, checkOut); 
		
		
		return null;
	}
	
	private Long differentInDay(String checkIn, String checkOut) {
		
		try {
			Date checkInDate = simpleDateFormat.parse(checkIn);
			Date checkOutDate = simpleDateFormat.parse(checkOut);
			long difference_in_time = checkOutDate.getTime() - checkInDate.getTime();
			long difference_in_day = (difference_in_time/ (1000 * 60 * 60 * 24)) % 365;
			return difference_in_day;
		} catch (ParseException e) {
			throw new ParseDateException(e.getMessage());
		}
	}
	
	private Long calculateTotalPrice(List<HomestayAftercareEntity> homestayServiceList, Long numberOfDateBooking) {
		Long totalPrice = 0L;
		homestayServiceList.forEach(s -> {
			totalPrice = totalPrice + s.getPrice();
		});
	}

}
