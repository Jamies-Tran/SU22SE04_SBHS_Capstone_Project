package com.swm.controller;

import java.net.URI;
import java.net.URISyntaxException;

import javax.websocket.server.PathParam;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.swm.converter.MomoOrderProcessConverter;
import com.swm.converter.WalletConverter;
import com.swm.dto.MomoCaptureWalletRequestDto;
import com.swm.dto.MomoCaptureWalletResponseDto;
import com.swm.dto.MomoOrderProcessDto;
import com.swm.dto.WalletDto;
import com.swm.entity.MomoOrderProcessEntity;
import com.swm.security.config.SignatureHashingConfig;
import com.swm.service.IWalletService;

@RestController
@RequestMapping("/api/wallet")
public class WalletController {

	@Autowired
	private IWalletService walletService;

	@Autowired
	private SignatureHashingConfig signatureHashing;

	@Autowired
	private MomoOrderProcessConverter momoOrderProcessConvert;

	@Autowired
	private WalletConverter walletConvert;

	@Value("${momo.access.key}")
	private String accessKey;

	@Value("${momo.partner.code}")
	private String partnerCode;

	@Value("${url.redirect}")
	private String redirectUrl;

	@Value("${url.ipn}")
	private String ipnUrl;

	@Value("${url.momo.api}")
	private String momoApiEndPoint;

	private RestTemplate restTemplate = new RestTemplate();

	private String orderId = "MM001";

	private String requestId = "MM001";

	private String extraData = "minhtq001";

	private String requestType = "captureWallet";

	private String lang = "vi";

	@PostMapping("/create/order")
	@PreAuthorize("hasRole('ROLE_LANDLORD')")
	public ResponseEntity<?> captureMomoWallet(@RequestBody WalletDto walletDto) {
		String rawHash = "accessKey=" + accessKey + "&amount=" + walletDto.getAmount() + "&extraData=" + extraData
				+ "&ipnUrl=" + ipnUrl + "&orderId=" + orderId + "&orderInfo=" + walletDto.getOrderInfo()
				+ "&partnerCode=" + partnerCode + "&redirectUrl=" + redirectUrl + "&requestId=" + requestId
				+ "&requestType=" + requestType;
		String signature = signatureHashing.sha256SigningKey(rawHash);
		MomoCaptureWalletRequestDto momoCaptureWalletRequestDto = new MomoCaptureWalletRequestDto(partnerCode,
				requestId, walletDto.getAmount(), orderId, walletDto.getOrderInfo(), redirectUrl, ipnUrl, requestType,
				extraData, lang, signature);
		try {
			RequestEntity<?> requestEntity = new RequestEntity<>(momoCaptureWalletRequestDto, HttpMethod.POST,
					new URI(momoApiEndPoint));
			ResponseEntity<?> responseEntity = restTemplate.exchange(requestEntity, MomoCaptureWalletResponseDto.class);
			return responseEntity;
		} catch (URISyntaxException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}

	@GetMapping("/redirect/url")
	public ResponseEntity<?> captureRedirectUrl(@RequestParam String partnerCode, @RequestParam String orderId,
			@RequestParam String requestId, @RequestParam Long amount, @RequestParam String orderInfo,
			@RequestParam String orderType, @RequestParam String transId, @RequestParam String resultCode,
			@RequestParam String message, @RequestParam String payType, @RequestParam String extraData,
			@RequestParam String signature) {
		
		MomoOrderProcessDto momoOrderProcessDto = new MomoOrderProcessDto(
				partnerCode, orderId, requestId, amount, orderInfo, orderType, transId, resultCode, message, payType, extraData, signature);
		walletService.addWalletBalance(momoOrderProcessEntity);
		WalletDto walletResponseDto = walletConvert.walletToDto(momoOrderProcessPersisted);

		return new ResponseEntity<>(HttpStatus.NO_CONTENT);
	}

	@PostMapping("/payment")
	public ResponseEntity<?> addWalletBalance(@RequestBody MomoOrderProcessDto momoOrderProcessDto) {
		MomoOrderProcessEntity momoOrderProcessEntity = momoOrderProcessConvert
				.momoOrderProcessToEntity(momoOrderProcessDto);
		walletService.addWalletBalance(momoOrderProcessEntity);
		// WalletDto walletResponseDto =
		// walletConvert.walletToDto(momoOrderProcessPersisted);

		return new ResponseEntity<>(HttpStatus.NO_CONTENT);
	}
}
