package com.swm.serviceImpl;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import com.swm.entity.AdminEntity;
import com.swm.entity.AvatarEntity;
import com.swm.entity.CitizenIdentificationEntity;
import com.swm.entity.LandlordAccountRequestEntity;
import com.swm.entity.LandlordEntity;
import com.swm.entity.PassengerEntity;
import com.swm.entity.UserEntity;
import com.swm.entity.VoucherWalletEntity;
import com.swm.entity.WalletEntity;
import com.swm.enums.RequestStatus;
import com.swm.enums.RequestType;
import com.swm.enums.UserStatus;
import com.swm.exception.DuplicateResourceException;
import com.swm.exception.ResourceNotFoundException;
import com.swm.repository.IUserRepository;
import com.swm.service.IUserService;

@Service
public class UserService implements IUserService {

	@Autowired
	private IUserRepository userRepo;

	private Date currentDate = new Date();

	private String defaulAvatartUrl = "default url";

	@Override
	public UserEntity findUserByUsername(String username) {
		UserEntity user = userRepo.findUserByUsername(username)
				.orElseThrow(() -> new UsernameNotFoundException("Username not found."));

		return user;
	}

	@Override
	public UserEntity createPassengerUser(UserEntity user) {
		if (userRepo.findUserByUsername(user.getUsername()).isPresent()) {
			throw new DuplicateResourceException(user.getUsername(), "User exist");
		} else if (userRepo.findUserByPhone(user.getPhone()).isPresent()) {
			throw new DuplicateResourceException(user.getPhone(), "Phone exist");
		} else if (userRepo.findUserByEmail(user.getEmail()).isPresent()) {
			throw new DuplicateResourceException(user.getEmail(), "Email exist");
		}
		// create avatar
		AvatarEntity avatar = new AvatarEntity();
		avatar.setUrl(user.getAvatar().getUrl());
		avatar.setPoster(user);
		avatar.setCreatedDate(currentDate);
		avatar.setCreatedBy(user.getUsername());
		// create passenger account
		PassengerEntity passengerAccount = new PassengerEntity();
		passengerAccount.setCreatedDate(currentDate);
		passengerAccount.setCreatedBy(user.getUsername());
		passengerAccount.setPassengerAccount(user);
		VoucherWalletEntity voucherWallet = new VoucherWalletEntity();
		voucherWallet.setVoucherWalletOwner(passengerAccount);
		voucherWallet.setCreatedDate(currentDate);
		voucherWallet.setCreatedBy(user.getUsername());
		passengerAccount.setVoucherWallet(voucherWallet);

		user.setPassenger(passengerAccount);
		UserEntity userPersisted = userRepo.save(user);
		return userPersisted;

	}

	@Override
	public UserEntity createLandlordUser(UserEntity user, String citizenIdentificationUrl) {
		if (userRepo.findUserByUsername(user.getUsername()).isPresent()) {
			throw new DuplicateResourceException(user.getUsername(), "User exist");
		} else if (userRepo.findUserByPhone(user.getPhone()).isPresent()) {
			throw new DuplicateResourceException(user.getPhone(), "Phone exist");
		} else if (userRepo.findUserByEmail(user.getEmail()).isPresent()) {
			throw new DuplicateResourceException(user.getEmail(), "Email exist");
		}
		// create avatar
		AvatarEntity avatarEntity = new AvatarEntity();
		avatarEntity.setUrl(user.getAvatar().getUrl());
		avatarEntity.setPoster(user);
		avatarEntity.setCreatedDate(currentDate);
		avatarEntity.setCreatedBy(user.getUsername());
		user.setAvatar(avatarEntity);
		// create landlord account
		LandlordEntity landlordAccount = new LandlordEntity();
		landlordAccount.setCreatedDate(currentDate);
		landlordAccount.setCreatedBy(user.getUsername());
		// create landlord's citizen identification image url (cccd)
		CitizenIdentificationEntity citizenIdentification = new CitizenIdentificationEntity();
		citizenIdentification.setOwner(landlordAccount);
		citizenIdentification.setCreatedDate(currentDate);
		citizenIdentification.setCreatedBy(user.getUsername());
		citizenIdentification.setUrl(citizenIdentificationUrl);
		landlordAccount.setCitizenIdentificationUrl(citizenIdentification);
		// create landlord's platform wallet
		WalletEntity wallet = new WalletEntity();
		wallet.setOwner(landlordAccount);
		wallet.setCreatedDate(currentDate);
		wallet.setCreatedBy(user.getUsername());
		landlordAccount.setWallet(wallet);

		// set status to pending to await for admin verify request
		user.setStatus(UserStatus.PENDING.name());
		// create landlord account request
		LandlordAccountRequestEntity landlordAccountRequest = new LandlordAccountRequestEntity();
		landlordAccountRequest.setCreatedBy(user.getUsername());
		landlordAccountRequest.setCreatedDate(currentDate);
		landlordAccountRequest.setAccountRequesting(landlordAccount);
		landlordAccountRequest.setStatus(RequestStatus.PENDING.name());
		landlordAccountRequest.setRequestType(RequestType.LANDLORD_CREATING_REQUEST.name());
		landlordAccount.setRequest(landlordAccountRequest);
		user.setLandlord(landlordAccount);
		landlordAccount.setLandlordAccount(user);
		UserEntity userPersisted = userRepo.save(user);

		return userPersisted;
	}

	@Override
	public UserEntity createAdminUser(UserEntity user) {
		if (userRepo.findUserByUsername(user.getUsername()).isPresent()) {
			throw new DuplicateResourceException(user.getUsername(), "User exist");
		} else if (userRepo.findUserByPhone(user.getPhone()).isPresent()) {
			throw new DuplicateResourceException(user.getPhone(), "Phone exist");
		} else if (userRepo.findUserByEmail(user.getEmail()).isPresent()) {
			throw new DuplicateResourceException(user.getEmail(), "Email exist");
		}

		// create avatar
		AvatarEntity avatarEntity = new AvatarEntity();
		avatarEntity.setCreatedBy(user.getUsername());
		avatarEntity.setCreatedDate(currentDate);
		avatarEntity.setUrl(user.getAvatar().getUrl());
		user.setAvatar(avatarEntity);
		// create admin
		AdminEntity adminAccount = new AdminEntity();
		adminAccount.setCreatedBy(user.getUsername());
		adminAccount.setCreatedDate(currentDate);
		adminAccount.setAdminAccount(user);
		// link user entity with admin entity
		user.setAdmin(adminAccount);

		UserEntity userPersisted = userRepo.save(user);

		return userPersisted;
	}

	@Override
	public UserEntity findUserById(Long Id) {
		UserEntity userEntity = userRepo.findById(Id)
				.orElseThrow(() -> new ResourceNotFoundException(Id.toString(), "User not found"));
		
		return userEntity;
	}

}
