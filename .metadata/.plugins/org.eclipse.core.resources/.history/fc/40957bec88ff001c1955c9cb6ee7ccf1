package com.swm.serviceImpl;

import java.util.Base64;
import java.util.List;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.swm.entity.LandlordEntity;
import com.swm.entity.MomoOrderProcessEntity;
import com.swm.entity.UserEntity;
import com.swm.entity.WalletEntity;
import com.swm.exception.ParseJsonException;
import com.swm.exception.ResourceNotFoundException;
import com.swm.repository.IMomoProcessOrderRepository;
import com.swm.repository.IWalletRepository;
import com.swm.service.IUserService;
import com.swm.service.IWalletService;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Service
public class WalletService implements IWalletService {
	
	@AllArgsConstructor
	@NoArgsConstructor
	@Getter
	@Setter
	public class UsernameMapper {
		private String username;
	}
	
	@Autowired
	private IWalletRepository walletRepo;
	
	@Autowired
	private IMomoProcessOrderRepository momoProcessRepo;
	
	@Autowired
	private IUserService userService;

	@Transactional
	@Override
	public WalletEntity addWalletBalance(MomoOrderProcessEntity momoProcess) {
		String landlordUserName = new String(Base64.getDecoder().decode(momoProcess.getExtraData()));
		System.err.println("landlord name: " + landlordUserName);
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			UsernameMapper usernameMapper = objectMapper.readValue(landlordUserName, UsernameMapper.class);
			
			UserEntity userEntity = userService.findUserByUsername(usernameMapper.getUsername());
			MomoOrderProcessEntity momoPersisted = momoProcessRepo.save(momoProcess);
			LandlordEntity landLordEntity = userEntity.getLandlord();
			if(landLordEntity == null) {
				throw new ResourceNotFoundException("This is not landlord account");
			}
			WalletEntity walletEntity = landLordEntity.getWallet();
			Long currentBalance = walletEntity.getBalance();
			currentBalance = currentBalance + momoPersisted.getAmount();
			walletEntity.setBalance(currentBalance);
			walletEntity.setMomoOrderList(List.of(momoPersisted));
			momoPersisted.setWalletOrder(walletEntity);
				
			return walletEntity;
		} catch (JsonProcessingException e) {
			throw new ParseJsonException("Json not valid");
		}
		
	}

	@Override
	public void payBookingDeposit(MomoOrderProcessEntity momoProces, Long totalPrice) {
		
	}
}

